# Production Docker Compose Configuration
# Deploy Infinivista Backend Microservices
services: # Database Service
  db:
    image: postgres:15-alpine
    container_name: infinivista_db_prod
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    networks:
      - infinivista_backend
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3" # Message Queue Service
  rabbitmq:
    image: rabbitmq:3.11-management-alpine
    container_name: infinivista_rabbitmq_prod
    restart: unless-stopped
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - infinivista_backend
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3" # Communication Module
  communication:
    build:
      context: ./module-communication
      dockerfile: Dockerfile
    container_name: infinivista_communication_prod
    restart: unless-stopped
    env_file:
      - ./module-communication/.env.prod
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - infinivista_backend
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3" # User Module
  user:
    build:
      context: ./module-user
      dockerfile: Dockerfile
    container_name: infinivista_user_prod
    restart: unless-stopped
    env_file:
      - ./module-user/.env.prod
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - infinivista_backend
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  feed:
    build:
      context: ./module-feed
      dockerfile: Dockerfile
    container_name: infinivista_feed_prod
    restart: unless-stopped
    env_file:
      - ./module-feed/.env.prod
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - infinivista_backend
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: infinivista_gateway_prod
    restart: unless-stopped
    ports:
      - "${GATEWAY_PORT:-3000}:3000"
    env_file:
      - ./api-gateway/.env.prod
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      user:
        condition: service_started
      feed:
        condition: service_started
      communication:
        condition: service_started
    networks:
      - infinivista_backend
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  infinivista_backend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: infinivista_prod

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  rabbitmq_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/rabbitmq
